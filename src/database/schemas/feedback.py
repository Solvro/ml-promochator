from datetime import datetime

from pydantic import BaseModel
from sqlalchemy import Column
from sqlalchemy.types import JSON as SQLAlchemyJSON
from sqlmodel import Field, SQLModel

from src.components.models import Paper
from src.database.schemas.supervisor import SupervisorCreate


class Feedback(SQLModel, table=True):
    """
    Represents a feedback entry for a recommended supervisor.

    This model is stored in a database and contains information about:
    - The user's question regarding their thesis topic.
    - The recommended supervisor's name and faculty.
    - A flag indicating whether the recommendation was adequate.

    Attributes:
        id (int | None): Unique identifier of the feedback entry (auto-incremented).
        question (str): The original question related to the thesis topic.
        supervisor_name (str): Name of the recommended supervisor.
        faculty (str | None): Faculty to which the supervisor belongs (optional).
        is_adequate (bool): Indicates whether the recommendation was adequate.
    """

    id: int | None = Field(default=None, primary_key=True)
    prompt_content: str
    prompt_faculty: str | None = None
    is_adequate: bool
    papers: list[Paper] = Field(
        default={},
        sa_column=Column(SQLAlchemyJSON),
    )

    created_at: datetime = Field(
        default_factory=datetime.now,
    )
    supervisor_id: int = Field(default=None, foreign_key='supervisor.id')


class FeedbackCreate(BaseModel):
    """
    Represents the input data for creating a new feedback entry.

    This model is used to validate and structure the data before inserting it into the database.

    Attributes:
        prompt_content (str): The original question related to the thesis topic.
        prompt_faculty (str | None): Faculty choosen by user.
        is_adequate (bool): Indicates whether the recommendation was adequate.
        papers (JSON): The papers generated by the model for a given supervisor.
        supervisor (SupervisorCreate): Supervisor object.
    """

    prompt_content: str = Field(max_length=2000)
    prompt_faculty: str | None = None
    is_adequate: bool
    papers: list[Paper]
    supervisor: SupervisorCreate
